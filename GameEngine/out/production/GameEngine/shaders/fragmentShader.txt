#version 400 core

in vec2 pass_TextureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;


void main(void){

    float ambientLight = 0.001;

    vec3 unitSurfaceNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    vec3 unitCameraVector = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitSurfaceNormal);

    float dotNormalLight = dot(unitSurfaceNormal, unitLightVector);
    float brightness = max(dotNormalLight, 0.0);
    vec3 diffuse = brightness * lightColor;

    float specularFactor = dot(reflectedLightDirection, unitCameraVector);
    specularFactor = max(specularFactor, ambientLight);
    float dampedFactor = pow(specularFactor, shineDamper);
    vec3 finalSpecular = dampedFactor * reflectivity * lightColor;


    vec4 textureColor = texture(textureSampler, pass_TextureCoordinates);

    if(textureColor.a < 0.5){
        discard;
    }

    out_Color = vec4(diffuse, 1.0) * textureColor + vec4(finalSpecular, 1.0);
    out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}